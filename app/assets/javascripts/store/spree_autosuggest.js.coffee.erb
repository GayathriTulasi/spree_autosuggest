//= require store/spree_core

maxFromDb = <%= Spree::Autosuggest::Config.rows_from_db %>
maxToDisplay = <%= Spree::Autosuggest::Config.rows_to_display %>
suggestOn = '<%= Spree::Autosuggest::Config.field %>'

$.ui.autocomplete::_renderItem = (ul, item) ->
  item.label = item.label.replace(new RegExp("^(" + $.ui.autocomplete.escapeRegex(@term) + ")", "gi"), "<strong>$1</strong>")
  $("<li></li>").data("item.autocomplete", item).append("<a>" + item.label + "</a>").appendTo ul


keyswitch = (str) ->
  ru = "йцукенгшщзхъфывапролджэячсмитьбюёЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ"
  en = "qwertyuiop[]asdfghjkl;'zxcvbnm,.`QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM<>~"

  if ru.indexOf(str.match("[^Wd_]")) is -1
    from = en
    to = ru
  else
    from = ru
    to = en

  switched = ""
  for char in str
    fromIndex = from.indexOf(char)
    if fromIndex < 0
      switched += char
    else
      switched += to[fromIndex]

  switched


filter_terms = (array, term) ->
  matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i")
  $.grep array, (value) ->
    source = value.label or value.value or value
    matcher.test(source) || switched = matcher.test(keyswitch(source))

$ ->
  cache = {}
  $("input[name="+suggestOn+"]:not(.ui-autocomplete-input)").live "focus", ->
    $(this).autocomplete
      source: (request, response) ->
        term = request.term.toLowerCase()

        foundInCache = false
        $.each cache, (key, data) ->
          if term.indexOf(key) is 0 and data.length < maxFromDb
            response filter_terms(data, term).slice(0, maxToDisplay)
            foundInCache = true
            return

        return if foundInCache

        $.getJSON "/suggestions", request, (data) ->
          cache[term] = data
          response data.slice(0, maxToDisplay)

      minLength: 1
